// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: transactions/transactions.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	core "technology_development_center_test/api/core"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionsService_Get_FullMethodName              = "/transactions_service.TransactionsService/Get"
	TransactionsService_CreateDeposit_FullMethodName    = "/transactions_service.TransactionsService/CreateDeposit"
	TransactionsService_CreateWithdrawal_FullMethodName = "/transactions_service.TransactionsService/CreateWithdrawal"
	TransactionsService_Delete_FullMethodName           = "/transactions_service.TransactionsService/Delete"
)

// TransactionsServiceClient is the client API for TransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsServiceClient interface {
	Get(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionsInfo, error)
	CreateDeposit(ctx context.Context, in *CreateTransaction, opts ...grpc.CallOption) (*core.Uid, error)
	CreateWithdrawal(ctx context.Context, in *CreateTransaction, opts ...grpc.CallOption) (*core.Uid, error)
	Delete(ctx context.Context, in *core.Uid, opts ...grpc.CallOption) (*core.Empty, error)
}

type transactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsServiceClient(cc grpc.ClientConnInterface) TransactionsServiceClient {
	return &transactionsServiceClient{cc}
}

func (c *transactionsServiceClient) Get(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionsInfo, error) {
	out := new(TransactionsInfo)
	err := c.cc.Invoke(ctx, TransactionsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) CreateDeposit(ctx context.Context, in *CreateTransaction, opts ...grpc.CallOption) (*core.Uid, error) {
	out := new(core.Uid)
	err := c.cc.Invoke(ctx, TransactionsService_CreateDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) CreateWithdrawal(ctx context.Context, in *CreateTransaction, opts ...grpc.CallOption) (*core.Uid, error) {
	out := new(core.Uid)
	err := c.cc.Invoke(ctx, TransactionsService_CreateWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) Delete(ctx context.Context, in *core.Uid, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := c.cc.Invoke(ctx, TransactionsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServiceServer is the server API for TransactionsService service.
// All implementations must embed UnimplementedTransactionsServiceServer
// for forward compatibility
type TransactionsServiceServer interface {
	Get(context.Context, *TransactionInfo) (*TransactionsInfo, error)
	CreateDeposit(context.Context, *CreateTransaction) (*core.Uid, error)
	CreateWithdrawal(context.Context, *CreateTransaction) (*core.Uid, error)
	Delete(context.Context, *core.Uid) (*core.Empty, error)
	mustEmbedUnimplementedTransactionsServiceServer()
}

// UnimplementedTransactionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsServiceServer struct {
}

func (UnimplementedTransactionsServiceServer) Get(context.Context, *TransactionInfo) (*TransactionsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransactionsServiceServer) CreateDeposit(context.Context, *CreateTransaction) (*core.Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeposit not implemented")
}
func (UnimplementedTransactionsServiceServer) CreateWithdrawal(context.Context, *CreateTransaction) (*core.Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawal not implemented")
}
func (UnimplementedTransactionsServiceServer) Delete(context.Context, *core.Uid) (*core.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransactionsServiceServer) mustEmbedUnimplementedTransactionsServiceServer() {}

// UnsafeTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServiceServer will
// result in compilation errors.
type UnsafeTransactionsServiceServer interface {
	mustEmbedUnimplementedTransactionsServiceServer()
}

func RegisterTransactionsServiceServer(s grpc.ServiceRegistrar, srv TransactionsServiceServer) {
	s.RegisterService(&TransactionsService_ServiceDesc, srv)
}

func _TransactionsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).Get(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_CreateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).CreateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_CreateDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).CreateDeposit(ctx, req.(*CreateTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_CreateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).CreateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_CreateWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).CreateWithdrawal(ctx, req.(*CreateTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).Delete(ctx, req.(*core.Uid))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsService_ServiceDesc is the grpc.ServiceDesc for TransactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions_service.TransactionsService",
	HandlerType: (*TransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TransactionsService_Get_Handler,
		},
		{
			MethodName: "CreateDeposit",
			Handler:    _TransactionsService_CreateDeposit_Handler,
		},
		{
			MethodName: "CreateWithdrawal",
			Handler:    _TransactionsService_CreateWithdrawal_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransactionsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions/transactions.proto",
}
