package scheduler

import (
	"errors"
	"technology_development_center_test/internal/db/entity"

	"github.com/gofrs/uuid/v5"
	"github.com/rs/zerolog"
	"gorm.io/gorm"
)

func (receiver *TransactionSchedulerService) getEntitiesUIDsToProcess(logger zerolog.Logger, transactionsType entity.TransactionType) (confirmedEntitiesUIDs []uuid.UUID, err error) {

	if err := receiver.db.Model(&entity.UserTransaction{}).
		Where(&entity.UserTransaction{Status: entity.TransactionStatusCreated, Type: transactionsType}).
		Order("created_at ASC").
		Select("uid").
		Find(&confirmedEntitiesUIDs).Error; errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Trace().Msg("entities not found")

		return nil, nil
	} else if err != nil {
		logger.Error().Err(err).Msg("failed to get uid in processing")

		return nil, err
	}

	return confirmedEntitiesUIDs, nil
}

// func (receiver *TransactionSchedulerService) getEntityToProcess(tx *gorm.DB, logger zerolog.Logger, entityUID uuid.UUID) (*entity.UserTransaction, error) {
// 	transactionEntity := &entity.UserTransaction{}
// 	if err := tx.Take(&transactionEntity, entity.UserTransaction{UID: &entityUID}).Error; errors.Is(err, gorm.ErrRecordNotFound) {
// 		logger.Trace().Msg("entity not found")

// 		return nil, nil
// 	} else if err != nil {
// 		logger.Error().Err(err).Msg("")

// 		return nil, err
// 	}

// 	logger.Trace().Msgf("transaction entity: %s", transactionEntity.UID)

// 	return transactionEntity, nil
// }
